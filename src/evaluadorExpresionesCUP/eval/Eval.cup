package evaluadorExpresionesCUP.eval;

import java_cup.runtime.*;
import evaluadorExpresionesCUP.alex.AnalizadorLexicoEval;
import evaluadorExpresionesCUP.alex.UnidadLexica;
import evaluadorExpresionesCUP.errors.GestionErroresEval;

scan with {: return getScanner().next_token(); :};
parser code {: 
   private GestionErroresEval errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }
:};
init with {: 
   errores = new GestionErroresEval();
   AnalizadorLexicoEval alex = (AnalizadorLexicoEval)getScanner();
   alex.fijaGestionErrores(errores);
:};


terminal  MAS, POR, PAP, PCIERRE;
terminal String NUM;

non terminal  VSem Exp, Term, Fact;

Exp ::= Exp: exp1 MAS Term: term 
   {: RESULT=new VSem();RESULT.val = exp1.val + term.val; :};
Exp ::= Term: term
   {: RESULT=new VSem();RESULT.val = term.val; :};
Term ::= Term: term1 POR Fact: fact 
   {: RESULT=new VSem();RESULT.val = term1.val * fact.val; :};
Term ::= Fact: fact
   {: RESULT=new VSem(); RESULT.val=fact.val; :};   
Fact ::= NUM: lexDeNum      // lexDeNum representa el lexema (el analizador l�xico
                            // debe fijarlo en la unidad l�xica devuelta       
   {: RESULT = new VSem(); RESULT.val = Integer.valueOf(lexDeNum).intValue(); :};
Fact ::= PAP Exp: exp PCIERRE
   {: RESULT = new VSem(); RESULT.val = exp.val; :};


